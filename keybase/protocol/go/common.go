// Auto-generated by avdl-compiler v1.1.1 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/common.avdl

package gregor1

import (
	keybase1 "github.com/keybase/client/go/protocol"
	rpc "github.com/keybase/go-framed-msgpack-rpc"
)

type TimeOrOffset struct {
	Time_   keybase1.Time `codec:"time_" json:"time_"`
	Offset_ DurationMsec  `codec:"offset_" json:"offset_"`
}

type Metadata struct {
	Uid            UID          `codec:"uid" json:"uid"`
	MsgID_         MsgID        `codec:"msgID_" json:"msgID_"`
	Ctime          TimeOrOffset `codec:"ctime" json:"ctime"`
	DeviceID_      DeviceID     `codec:"deviceID_" json:"deviceID_"`
	InbandMsgType_ int          `codec:"inbandMsgType_" json:"inbandMsgType_"`
}

type InbandMessage struct {
	StateUpdate *StateUpdateMessage `codec:"stateUpdate,omitempty" json:"stateUpdate,omitempty"`
	StateSync   *StateSyncMessage   `codec:"stateSync,omitempty" json:"stateSync,omitempty"`
}

type StateUpdateMessage struct {
	Md         Metadata   `codec:"md" json:"md"`
	Creation_  *Item      `codec:"creation_,omitempty" json:"creation_,omitempty"`
	Dismissal_ *Dismissal `codec:"dismissal_,omitempty" json:"dismissal_,omitempty"`
}

type StateSyncMessage struct {
	Md Metadata `codec:"md" json:"md"`
}

type MsgRange struct {
	EndTime_  TimeOrOffset `codec:"endTime_" json:"endTime_"`
	Category_ Category     `codec:"category_" json:"category_"`
}

type Dismissal struct {
	MsgIDs []MsgID    `codec:"msgIDs" json:"msgIDs"`
	Ranges []MsgRange `codec:"ranges" json:"ranges"`
}

type Item struct {
	Category    Category       `codec:"category" json:"category"`
	Dtime       TimeOrOffset   `codec:"dtime" json:"dtime"`
	NotifyTimes []TimeOrOffset `codec:"notifyTimes" json:"notifyTimes"`
	Body        Body           `codec:"body" json:"body"`
}

type OutOfBandMessage struct {
	Uid     UID    `codec:"uid" json:"uid"`
	System_ System `codec:"system_" json:"system_"`
	Body_   Body   `codec:"body_" json:"body_"`
}

type Message struct {
	Oobm *OutOfBandMessage `codec:"oobm,omitempty" json:"oobm,omitempty"`
	Ibm  *InbandMessage    `codec:"ibm,omitempty" json:"ibm,omitempty"`
}

type DurationMsec int64
type Category string
type System string
type UID keybase1.UID
type MsgID []byte
type DeviceID []byte
type Body []byte
type CommonInterface interface {
}

func CommonProtocol(i CommonInterface) rpc.Protocol {
	return rpc.Protocol{
		Name:    "gregor.1.common",
		Methods: map[string]rpc.ServeHandlerDescription{},
	}
}

type CommonClient struct {
	Cli rpc.GenericClient
}
